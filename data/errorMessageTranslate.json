{"fr":{
"deuxPointsIf": "Une ligne commençant par 'if' doit se terminer par les deux point ':' comme ceci -> 'if a < b:'.",
"deuxPointsElse": "Une ligne commençant par 'else' doit se terminer par les deux points ':' comme ceci -> 'else:'.",
"deuxPointsElif": "Une ligne commençant par 'elif' doit se terminer par les deux points ':' comme ceci -> 'else if b < c:'.",
"deuxPointsWhile": "Une ligne commençant par 'while' doit se terminer par les deux points ':' comme ceci -> 'while maVariable < 5:'.",
"deuxPointsFor": "Une ligne commençant par 'for' doit se terminer par les deux points ':' comme ceci -> 'for loop in range(5):'.",
"deuxPointsDef": "Une ligne commençant par 'def' doit se terminer par les deux points ':' comme ceci -> 'def maFonction():'.",

"conditionOneEqual": "Pour tester une égalitée dans une condition, le double égal doit être utilisé, il faut donc écrire: a == b.",
"previousErrorBrackets|errorBrackets": "Il doit y avoir le bon nombre de parenthèses ouvrantes et fermantes: (a*(b+c)) est valide mais (a*(b+c) ne l'est pas.",
"missingParentheses": "L'appel d'une fonction en python se fait grâce aux parenthèses, il faut donc écrire {{0}}([paramètres]), où paramètres est à remplacer par les paramètres à utiliser.",

"pointVirguleFin": "Le point virgule ';' n'est pas necessaire en python, un simple retour à la ligne suffit.",
"typeVariableDeclaration": "Les variables en python n'ont pas un type fixé, il n'est donc pas necessaire de le specifier.",

"plusGrandEgalInversion": "La comparaison 'plus petit ou egal' se fait avec <= (=< est invalide).",
"plusPetitEgalInversion": "La comparaison 'plus grand ou egal' se fait avec >= (=> est invalide).",
"guillemetsError": "Les chaines de carcatères en python doivent être encadrées par des guillemets, des deux cotés.",

"nonAscii": "Les caractères UTF-8 (accents, émojis) ne sont pas gérés par defaut avec python 2, il faut rajouter la ligne \"# coding=utf-8\" tout en haut du fichier, avant toute instruction.",
"invalidSyntax": "Une erreur de syntaxe a été détecté, veuillez vérifier le programme.",

"indentationError": "L'indentation en python permet de séparer les blocs, il faut donc bien veiller à ce qu'il y ai toujours le même nombre d'espaces avant chaque instruction d'un même bloc.",
"indentationErrorEmptyBlock": "En python on ne peut pas laisser un bloc d'instruction vide, il faut toujours y mettre au moins une instruction (si il faut tester le code on peut utiliser \"pass\" qui est une instruction qui ne fait rien).",
"indentationErrorLevel": "Toutes les instructions d'un même bloc doivent être alignées, il faut faire très attention aux nombre d'espaces en debut de ligne.",

"indexError": "L'execution du programme entraine l'accès à un élément hors d'une liste, en python les élements d'une liste sont indexé entre 0 et taille-1 (des indexs négatifs peuvent être utilisés pour accéder aux derniers éléments d'une liste).",
"KeyError": "L'execution du programme entraine l'accès à un élément de dictionnaire qui n'existe pas, si ce comportement est voulu il faut utiliser \"dictionnaire.get(\"clef\", valeurParDefaut)\".",
"ZeroDivisionError": "La division par zéro n'est pas définie, il faut verifier que le diviseur est non nul.",
"mathDomainError": "La fonction mathématique utilisée n'est pas définie pour la valeur passée en paramètre.",
"mathDomainError_log" : "La fonction log (logarithme) prend en paramètre un nombre qui doit être strictement positif à 0. ",
"mathDomainError_sqrt":"La fonction sqrt (racine carrée) prend en paramètre un nombre qui doit être superieur ou égal à 0. ",
"ImportError": "Le module importé n'existe pas. Le fichier importé doit être présent à coté du fichier exécuté.",
"EOFError": "Ton code à tenté de lire une ligne d'entrée, mais il n'y en avais pas ou plus ! A chaque fois que tu utilise input(), ton code lit une nouvelle ligne. Une erreure se produit quand plus aucune ligne n'a pas étée lue. -- A verifier, il me semble que c'est lorsque une chaine de caractère/parenthèses n'est pas fermée en fin de fichier, et que le parser arrive en fin de fichier sans avoir pu terminer son bloc",

"valueErrorInt": "Python ne peut convertir que des chaines de la forme \"3421\" en entier, si il faut traiter la chaine avant les fonctions replace, split et strip peuvent être utiles.",
"valueErrorIntMappage": "Tu utilise la fonction int() pour convertire en nombre une suite d'entiers. Mais tu convertit plusieurs nombres à la fois ! pour cela, remplace int(--ton code--) par: map(int, (--ton code--).split()) -- Je comprend pas cette erreur",
"valueErrorIntInsteadOfFloat": "Python ne peut convertir que des chaines de la forme \"3421\" en entier, pour convertir une chaine de caractères en flotant il faut utiliser la fonction float.",

"undefinedVar": "La variable (ou la fonction) {{0}} n'existe pas, ou pas encore, à cet endroit, il faut la déclarer (c'est à dire faire un \"mavariable = ...\") avant.",
"returnOutsideFct": "L'instruction 'return' doit se trouver dans une fonction, elle sert à terminer la fonction et à renvoyer une valeur.",

"custom": "{{0}}"
}}
